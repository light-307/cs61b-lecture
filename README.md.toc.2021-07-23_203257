* [CS61B笔记](#cs61b笔记)
   * [<strong>1. Intro, Hello World Java</strong>](#1-intro-hello-world-java)
   * [<strong>2. Defining and Using Classes</strong>](#2-defining-and-using-classes)
   * [<strong>3. References, Recursion, and Lists</strong>](#3-references-recursion-and-lists)
   * [<strong>4. SLLists, Nested Classes, Sentinel Nodes</strong>](#4-sllists-nested-classes-sentinel-nodes)
   * [<strong>5. DLLists, Arrays</strong>](#5-dllists-arrays)
   * [<strong>6. ALists, Resizing, vs. SLists</strong>](#6-alists-resizing-vs-slists)
   * [<strong>7. Testing</strong>](#7-testing)
      * [Java Integer 类中 128 陷阱](#java-integer-类中-128-陷阱)
   * [<strong>8. Inheritance, Implements</strong>](#8-inheritance-implements)
      * [interface and implements ](#interface-and-implements-)
   * [<strong>9. Extends, Casting, Higher Order Functions</strong>](#9-extends-casting-higher-order-functions)
   * [<strong>10. Subtype Polymorphism vs. HoFs</strong>](#10-subtype-polymorphism-vs-hofs)
   * [<strong>11. Exceptions, Iterators, Object Methods</strong>](#11-exceptions-iterators-object-methods)
   * [<strong>12. Coding in the Real World, Review</strong>](#12-coding-in-the-real-world-review)
   * [<strong>13. Asymptotics I</strong>](#13-asymptotics-i)
   * [<strong>14. Disjoint Sets</strong>](#14-disjoint-sets)
   * [<strong>15. Asymptotics II</strong>](#15-asymptotics-ii)
   * [<strong>16. ADTs, Sets, Maps, BSTs</strong>](#16-adts-sets-maps-bsts)
   * [<strong>17. B-Trees (2-3, 2-3-4 Trees)</strong>](#17-b-trees-2-3-2-3-4-trees)
   * [<strong>18. Red Black Trees</strong>](#18-red-black-trees)
      * [<strong>summary</strong>](#summary)
   * [<strong>19. Range Searching and Multi-Dimensional Data</strong>](#19-range-searching-and-multi-dimensional-data)
      * [QuadTree](#quadtree)
      * [K-D Tree （K个维度的tree）](#k-d-tree-k个维度的tree)
      * [K-D Tree nearest method](#k-d-tree-nearest-method)
      * [summary](#summary-1)
   * [<strong>20. Hashing</strong>](#20-hashing)
      * [Two Important Warnings When Using HashMaps/HashSets](#two-important-warnings-when-using-hashmapshashsets)
   * [<strong>21. Heaps and PQs</strong>](#21-heaps-and-pqs)
      * [Heap Operations Summary](#heap-operations-summary)
      * [Data Structures Summary](#data-structures-summary)
   * [<strong>22. Prefix Operations and Tries</strong>](#22-prefix-operations-and-tries)
      * [string specific operation](#string-specific-operation)
      * [Autocomplete](#autocomplete)
   * [<strong>23. Tree and Graph Traversals</strong>](#23-tree-and-graph-traversals)
      * [Tree Traversal Orderings](#tree-traversal-orderings)
      * [graph](#graph)
      * [simple graph](#simple-graph)
      * [s-t Connectivity Problem （使用深度优先搜寻）](#s-t-connectivity-problem-使用深度优先搜寻)
      * [Depth First Traversal 深度优先搜寻](#depth-first-traversal-深度优先搜寻)
   * [<strong>24. Graph Traversals and Implementations</strong>](#24-graph-traversals-and-implementations)
      * [<strong>BFS</strong> - BreadthFirstPaths Demo](#bfs---breadthfirstpaths-demo)
      * [Bare-Bones Undirected Graph Implementation](#bare-bones-undirected-graph-implementation)
      * [Depth First Search Implementation](#depth-first-search-implementation)
      * [BreadthFirstPaths Implementation](#breadthfirstpaths-implementation)
   * [<strong>25. Shortest Paths</strong>](#25-shortest-paths)
      * [<strong>Dijkstra’s Algorithm</strong>:](#dijkstras-algorithm)
      * [A*](#a)
      * [Graph Problems summary](#graph-problems-summary)
   * [<strong>26. Minimum Spanning Trees</strong>](#26-minimum-spanning-trees)
      * [Generic MST Finding Algorithm](#generic-mst-finding-algorithm)
      * [Prim’s Algorithm](#prims-algorithm)
      * [Prim’s vs. Dijkstra’s](#prims-vs-dijkstras)
      * [Kruskal’s Algorithm](#kruskals-algorithm)
      * [Shortest Paths and MST Algorithms Summary](#shortest-paths-and-mst-algorithms-summary)
   * [<strong>27. Software Engineering I</strong>](#27-software-engineering-i)
      * [Strategic Programming （战略编程）](#strategic-programming-战略编程)
   * [<strong>28. Reductions and Decomposition</strong>](#28-reductions-and-decomposition)
      * [Topological Sort (拓扑排序)](#topological-sort-拓扑排序)
      * [Shortest Paths on DAGs](#shortest-paths-on-dags)
      * [Longest Paths](#longest-paths)
         * [The Longest Paths Problem on DAGs](#the-longest-paths-problem-on-dags)
   * [<strong>29. Basic Sorts</strong>](#29-basic-sorts)
   * [<strong>30. Quick Sort</strong>](#30-quick-sort)
      * [Backstory, Partitioning](#backstory-partitioning)
      * [Quicksort](#quicksort)
      * [Avoiding the Quicksort Worst Case （在后面的课中更详细地讲述）](#avoiding-the-quicksort-worst-case-在后面的课中更详细地讲述)
   * [<strong>31. Software Engineering II</strong>](#31-software-engineering-ii)
      * [Build Your Own World](#build-your-own-world)
      * [Modular Design](#modular-design)
   * [<strong>32. More Quick Sort, Sorting Summary</strong>](#32-more-quick-sort-sorting-summary)
      * [Tony Hoare’s In-place Partitioning Scheme](#tony-hoares-in-place-partitioning-scheme)
      * [Quicksort vs. Mergesort](#quicksort-vs-mergesort)
      * [Quick Select](#quick-select)
      * [Stability, Adaptiveness, Optimization](#stability-adaptiveness-optimization)
   * [<strong>33. Software Engineering III</strong>](#33-software-engineering-iii)
   * [<strong>34. Sorting and Algorithmic Bounds</strong>](#34-sorting-and-algorithmic-bounds)
   * [<strong>35. Radix Sorts</strong>](#35-radix-sorts)
      * [Counting Sort](#counting-sort)
      * [LSD Radix Sort 从最低位开始](#lsd-radix-sort-从最低位开始)
      * [MSD (Most Significant Digit) Radix Sort 从最高位开始](#msd-most-significant-digit-radix-sort-从最高位开始)
   * [<strong>36. Sorting and Data Structures Conclusion</strong>](#36-sorting-and-data-structures-conclusion)
      * [Intuitive(直觉的): Radix Sort vs. Comparison Sorting](#intuitive直觉的-radix-sort-vs-comparison-sorting)
      * [Cost Model: Radix Sort vs. Comparison Sorting](#cost-model-radix-sort-vs-comparison-sorting)
      * [Empirical Study: Radix Sort vs. Comparison Sorting](#empirical-study-radix-sort-vs-comparison-sorting)
      * [Rerunning Our Empirical Study With No JIT](#rerunning-our-empirical-study-with-no-jit)
      * [Sorting Summary](#sorting-summary)
   * [<strong>38. Compression(压缩)</strong>](#38-compression压缩)
      * [Prefix Free Codes](#prefix-free-codes)
      * [Shannon Fano Codes](#shannon-fano-codes)
      * [Huffman Coding](#huffman-coding)
      * [Huffman Coding Data Structures](#huffman-coding-data-structures)
      * [Huffman Coding in Practice](#huffman-coding-in-practice)
      * [Compression Theory](#compression-theory)
   * [<strong>39. Compression, Complexity, and P=NP?</strong>](#39-compression-complexity-and-pnp)
      * [Optimal Compression and Kolmogorov Complexity](#optimal-compression-and-kolmogorov-complexity)
      * [Space/Time Bounded Compression](#spacetime-bounded-compression)
      * [P = NP?](#p--np)
* [Markdown 基础语法](#markdown-基础语法)
* [这是 H1](#这是-h1)
   * [这是 H2](#这是-h2)
      * [这是 H3](#这是-h3)

<!-- Added by: light, at: Fri Jul 23 20:32:57 CST 2021 -->

